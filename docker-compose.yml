version: "3.8"

services:
  # Main application
  app:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://coderunner:password123@postgres:5432/coderunner
      - REDIS_URL=redis://redis:6379
      - USE_DOCKER=true
    volumes:
      - code_execution_tmp:/tmp/code-execution
      - /var/run/docker.sock:/var/run/docker.sock # For Docker-in-Docker
    networks:
      - coderunner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Job queue and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - coderunner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  # Database for persistence
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=coderunner
      - POSTGRES_USER=coderunner
      - POSTGRES_PASSWORD=password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - coderunner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coderunner -d coderunner"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # High-performance Rust execution engine
  rust-engine:
    build:
      context: ./rust-engine
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://coderunner:password123@postgres:5432/coderunner
      - REDIS_URL=redis://redis:6379
      - RUST_ENGINE_PORT=8080
    volumes:
      - code_execution_tmp:/tmp/code-execution
    networks:
      - coderunner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  code_execution_tmp:

networks:
  coderunner-network:
    driver: bridge
